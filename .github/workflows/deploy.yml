name: Docker Image Deployment

on:
  workflow_run:
    workflows: ["Docker Image CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    # Krok odpowiedzialny za pobranie tagu obrazu Docker z artefaktu
    - name: Download artifact with Docker image tag
      uses: actions/download-artifact@v2
      with:
        name: docker-image-tag
        path: /tmp

    # Ustawienie zmiennej środowiskowej z tagiem obrazu Docker
    - name: Set Docker Image Tag
      run: echo "IMAGE_TAG=$(cat /tmp/docker-image-tag)" >> $GITHUB_ENV

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Krok odpowiedzialny za pobranie obrazu Docker z konkretnym tagiem lub tagiem 'latest'
    - name: Pull the Docker image with specific tag or latest
      run: |
        if docker pull kathelan/budgetify-be:${{ env.IMAGE_TAG }}; then
          echo "Pulled image with specific tag."
          IMAGE_TO_DEPLOY="kathelan/budgetify-be:${{ env.IMAGE_TAG }}"
        else
          echo "Specific tag not found. Pulling latest image."
          IMAGE_TO_DEPLOY="kathelan/budgetify-be:latest"
          docker pull $IMAGE_TO_DEPLOY
        fi

    # Krok odpowiedzialny za zapisanie obrazu Docker do pliku tar
    - name: Save the Docker image
      run: docker save $IMAGE_TO_DEPLOY > image.tar

    # Krok odpowiedzialny za skopiowanie obrazu Docker na serwer VPS
    - name: Copy Docker Image to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT }}
        source: "image.tar"
        target: "/tmp/image.tar"

    # Krok odpowiedzialny za wdrożenie obrazu Docker na serwerze VPS
    - name: Deploy on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          docker load -i /tmp/image.tar
          docker stop my-container || true
          docker rm my-container || true
          docker run -d --restart always --name my-container \
          -p 0.0.0.0:8080:8080 \
          -e DB_URL=${{ secrets.DB_URL }} \
          -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          $IMAGE_TO_DEPLOY
